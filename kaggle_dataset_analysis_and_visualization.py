# -*- coding: utf-8 -*-
"""Kaggle Dataset Analysis and Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lzs3u6nU8kS_lSKMLGF7NvbmQvAl9xgi

#**Introduction**

Done by ***Cosmus Kavithi Mutuku*** (Data Scientist)

###**Problem Statement**
"Identify Factors Affecting Flight Delays and Develop a Predictive Model to Improve Punctuality"

###**Description**
Flight delays can be frustrating for passengers and costly for airlines. By analyzing the airline dataset, the goal is to identify the key factors that contribute to flight delays and develop a predictive model to help airlines improve punctuality. This project aims to provide actionable insights for airlines to optimize their operations and enhance the passenger experience.

###**Key Objectives**:
1.   **Identify Delay Patterns**: Analyze historical flight data to identify patterns and trends associated with flight delays. Explore how factors such as airport location, flight routes, pilot performance, and departure times influence delays.
2.   **Feature Engineering**: Create relevant features or variables that may influence flight delays, such as time of day, day of the week, or seasonal effects.
3. **Predictive Modeling**: Build a predictive model (e.g., logistic regression, random forest, or XGBoost) to predict the likelihood of a flight being delayed based on the identified factors.
4. **Model Evaluation**: Evaluate the predictive model's performance using appropriate metrics such as accuracy, precision, recall, and F1-score. Fine-tune the model to achieve the best possible results.
5. **Insights and Recommendations**: Provide actionable insights to airlines based on the model's findings. Suggest strategies for mitigating delays, optimizing flight schedules, and improving overall punctuality.
6. **Dashboard**: Create an interactive dashboard to visualize delay patterns, model predictions, and recommended actions for airlines. This dashboard can be a valuable tool for airline operators.
7. **Impact Assessment**: Assess the potential impact of implementing recommended strategies on reducing flight delays and improving the passenger experience.
"""

#Load the Dataset from the Google drive
!pip install pandas
!pip install gdown

import pandas as pd
import gdown

# Define the file ID of your Google Drive file
file_id = '1XGu5vQQJMLh523oE1y0IlQT3D1ODj-OL'

# Define the URL template for downloading the file
url_template = 'https://drive.google.com/uc?id={}'
file_url = url_template.format(file_id)

# Define the output file name
output_file = 'airline_dataset.csv'

# Download the file from Google Drive
gdown.download(file_url, output_file, quiet=False)

# Load the data into a DataFrame
df = pd.read_csv(output_file)
# Display all columns in a single row as a single table
pd.set_option('display.expand_frame_repr', False)
print(df.head())

"""#**Data Exploration**

####**Basic Summary Statistics**
"""

df.describe()

df.info()

#Any missing values
df.isnull().sum()

#check and drop any duplicate rows
df.drop_duplicates()

"""**Important Observations:**

1. The dataset contains a total of 15 columns, each with a unique name that describes the type of information it holds. The column names are self-explanatory and provide insights into the content of the dataset
2. In this dataset, all columns have 98,619 non-null values, which suggests that there are no missing values in any of the columns.
3. Most columns (e.g., Passenger ID, First Name, Last Name, Gender, Nationality, etc.) are of the "object" data type, indicating that they likely contain categorical or text data. The "Age" column is of the "int64" data type, indicating it contains numerical (integer) data.

###**Exploring Categorial Data**
"""

#Gender
Gender_counts = df['Gender'].value_counts()
print(Gender_counts)

import matplotlib.pyplot as plt

# Plot the category counts as a pie chart with labels inside
plt.figure(figsize=(6, 6))

# Create a pie chart with labels inside and display percentages with category names
patches, texts, autotexts = plt.pie(
    Gender_counts, autopct=lambda p: f'{p:.1f}% ({int(p * sum(Gender_counts) / 100)})',
    labels=Gender_counts.index, startangle=90)

# Make the title bold
plt.title('Category Distribution for Gender', fontweight='bold')

# Adjust the label and percentage font size
for text in texts:
    text.set(size=12, fontweight='bold')

for autotext in autotexts:
    autotext.set(size=12, fontweight='bold')

plt.show()

#Nationality
# Count the frequency of categories in a specific column
nationality_counts = df['Nationality'].value_counts()
print(nationality_counts)

# Get the top 10 and least 10 nationalities
top_10 = nationality_counts.head(10)
least_10 = nationality_counts.tail(10)

# Define custom colors
top_10_colors = ['skyblue', 'lightcoral', 'lightgreen', 'gold', 'lightseagreen',
                 'lightcoral', 'lightskyblue', 'lightgreen', 'gold', 'lightseagreen']
least_10_colors = ['lightcoral', 'skyblue', 'lightgreen', 'gold', 'lightseagreen',
                   'lightcoral', 'lightskyblue', 'lightgreen', 'gold', 'lightseagreen']

# Create figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(10, 5))

# Plot the top 10 nationalities
axes[0].bar(top_10.index, top_10, color=top_10_colors)
axes[0].set_title('Top 10 Nationalities', fontsize=14, fontweight='bold')
axes[0].set_xlabel('Nationality', fontsize=12)
axes[0].set_ylabel('Frequency', fontsize=12)
axes[0].tick_params(axis='x', labelrotation=45)

# Plot the least 10 nationalities
axes[1].bar(least_10.index, least_10, color=least_10_colors)
axes[1].set_title('Least 10 Nationalities', fontsize=14, fontweight='bold')
axes[1].set_xlabel('Nationality', fontsize=12)
axes[1].set_ylabel('Frequency', fontsize=12)
axes[1].tick_params(axis='x', labelrotation=45)

plt.tight_layout()
plt.show()

#Airport Name

# Count the frequency of each Airport Name
airport_counts = df['Airport Name'].value_counts()

# Get the top 10 and least 10 Airport Names
top_10_airports = airport_counts.head(10)
least_10_airports = airport_counts.tail(10)

# Define custom colors
top_10_colors = ['skyblue', 'lightcoral', 'lightgreen', 'gold', 'lightseagreen',
                 'lightcoral', 'lightskyblue', 'lightgreen', 'gold', 'lightseagreen']
least_10_colors = ['lightcoral', 'skyblue', 'lightgreen', 'gold', 'lightseagreen',
                   'lightcoral', 'lightskyblue', 'lightgreen', 'gold', 'lightseagreen']

# Create figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(10, 5))

# Plot the top 10 Airport Names
axes[0].bar(top_10_airports.index, top_10_airports, color=top_10_colors)
axes[0].set_title('Top 10 Airport Names', fontsize=14, fontweight='bold')
axes[0].set_xlabel('Airport Name', fontsize=12)
axes[0].set_ylabel('Frequency', fontsize=12)
axes[0].tick_params(axis='x', labelrotation=45)

# Plot the least 10 Airport Names
axes[1].bar(least_10_airports.index, least_10_airports, color=least_10_colors)
axes[1].set_title('Least 10 Airport Names', fontsize=14, fontweight='bold')
axes[1].set_xlabel('Airport Name', fontsize=12)
axes[1].set_ylabel('Frequency', fontsize=12)
axes[1].tick_params(axis='x', labelrotation=45)

plt.tight_layout()
plt.show()

#Country Name
import seaborn as sns

# Count the frequency of each Country Name
country_counts = df['Country Name'].value_counts()

# Get the top 10 and least 10 Country Names
top_10_countries = country_counts.head(10)
least_10_countries = country_counts.tail(10)

# Set Seaborn style
sns.set(style="whitegrid")

# Create figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(10, 5))

# Plot the top 10 Country Names using Seaborn
sns.barplot(x=top_10_countries.values, y=top_10_countries.index, ax=axes[0], palette="Blues_d")
axes[0].set_title('Top 10 Countries (Airport Usage)', fontsize=14, fontweight='bold')
axes[0].set_xlabel('Frequency', fontsize=12)
axes[0].set_ylabel('Country Name', fontsize=12)

# Plot the least 10 Country Names using Seaborn
sns.barplot(x=least_10_countries.values, y=least_10_countries.index, ax=axes[1], palette="Reds_d")
axes[1].set_title('Least 10 Countries (Airport Usage)', fontsize=14, fontweight='bold')
axes[1].set_xlabel('Frequency', fontsize=12)
axes[1].set_ylabel('Country Name', fontsize=12)

plt.tight_layout()
plt.show()

# Count the frequency of each continent
continent_counts = df['Continents'].value_counts()

# Get the top 10 and least 10 continents
top_10_continents = continent_counts.head(10)
least_10_continents = continent_counts.tail(10)

# Set Seaborn style
sns.set(style="whitegrid")

# Create figure and subplots
fig, axes = plt.subplots(1, 2, figsize=(10, 5))

# Plot the top 10 continents using Seaborn
sns.barplot(x=top_10_continents.values, y=top_10_continents.index, ax=axes[0], palette="Blues_d")
axes[0].set_title('Top 10 Continents (Airport Usage)', fontsize=14, fontweight='bold')
axes[0].set_xlabel('Frequency', fontsize=12)
axes[0].set_ylabel('Continent', fontsize=12)

# Plot the least 10 continents using Seaborn
sns.barplot(x=least_10_continents.values, y=least_10_continents.index, ax=axes[1], palette="Reds_d")
axes[1].set_title('Least 10 Continents (Airport Usage)', fontsize=14, fontweight='bold')
axes[1].set_xlabel('Frequency', fontsize=12)
axes[1].set_ylabel('Continent', fontsize=12)

plt.tight_layout()
plt.show()

#Datetime

# Convert "Departure Date" to datetime
df['Departure Date'] = pd.to_datetime(df['Departure Date'])

# Extract the year from the "Departure Date" column
df['Year'] = df['Departure Date'].dt.year

# Count the frequency of each year
year_counts = df['Year'].value_counts()
year_counts

# Convert "Departure Date" to datetime
df['Departure Date'] = pd.to_datetime(df['Departure Date'])

# Extract the month from the "Departure Date" column
df['Month'] = df['Departure Date'].dt.month

# Map month numbers to month names
month_names = {
    1: 'January',
    2: 'February',
    3: 'March',
    4: 'April',
    5: 'May',
    6: 'June',
    7: 'July',
    8: 'August',
    9: 'September',
    10: 'October',
    11: 'November',
    12: 'December'
}
df['Month'] = df['Month'].map(month_names)

# Count the frequency of each month
month_counts = df['Month'].value_counts().reindex(list(month_names.values()))

# Create a bar plot to visualize the departure month counts
plt.figure(figsize=(9, 5))
sns.barplot(x=month_counts.index, y=month_counts.values, palette="viridis")
plt.title('Departure Month Counts', fontsize=14, fontweight='bold')
plt.xlabel('Month', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

# Annotate the bar with value counts at the top
for index, value in enumerate(month_counts):
    plt.text(index, value, str(value), ha='center', va='bottom', fontsize=10, fontweight='bold')

plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

# Convert "Departure Date" to datetime
df['Departure Date'] = pd.to_datetime(df['Departure Date'])

# Extract the day of the week from the "Departure Date" column (0=Monday, 1=Tuesday, ..., 6=Sunday)
df['Day of Week'] = df['Departure Date'].dt.dayofweek

# Map day numbers to day names
day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
df['Day of Week'] = df['Day of Week'].map(lambda x: day_names[x])

# Count the frequency of each day of the week and sort by the order of days
day_counts = df['Day of Week'].value_counts().reindex(day_names)

# Create a custom color palette for the bars
colors = sns.color_palette("husl", len(day_counts))

# Create a bar plot to visualize the day of the week counts
plt.figure(figsize=(9, 5))
sns.barplot(x=day_counts.index, y=day_counts.values, palette=colors)
plt.title('Departure Day of the Week Counts', fontsize=14, fontweight='bold')
plt.xlabel('Day of Week', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

# Annotate the bar with value counts at the top
for index, value in enumerate(day_counts):
    plt.text(index, value, str(value), ha='center', va='bottom', fontsize=10, fontweight='bold')

plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

# Count the frequency of each pilot name
pilot_counts = df['Pilot Name'].value_counts()

# Get the top 10 pilots with the most flights
top_10_pilots = pilot_counts.head(10)

# Get the least 10 pilots with the fewest flights
least_10_pilots = pilot_counts.tail(10)

# Create a custom color palette for the bars
top_colors = sns.color_palette("Blues", len(top_10_pilots))
least_colors = sns.color_palette("Reds", len(least_10_pilots))

# Create separate bar plots for the top and least pilots
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.barplot(x=top_10_pilots.values, y=top_10_pilots.index, palette=top_colors)
plt.title('Top 10 Pilots by Flight Count', fontsize=14, fontweight='bold')
plt.xlabel('Frequency', fontsize=12)
plt.ylabel('Pilot Name', fontsize=12)

plt.subplot(1, 2, 2)
sns.barplot(x=least_10_pilots.values, y=least_10_pilots.index, palette=least_colors)
plt.title('Least 10 Pilots by Flight Count', fontsize=14, fontweight='bold')
plt.xlabel('Frequency', fontsize=12)
plt.ylabel('Pilot Name', fontsize=12)

plt.tight_layout()
plt.show()

#Flight Status

# Get unique values in the 'Flight Status' column
unique_flight_status = df['Flight Status'].unique()

# Print the unique values
print(unique_flight_status)

#On time

# Filter the DataFrame to only include rows with 'Flight Status' equal to 'On Time'
on_time_df = df[df['Flight Status'] == 'On Time']

# Count the occurrences of each 'Airport Name'
on_time_airport_counts = on_time_df['Airport Name'].value_counts()

# Select the top 10 airports and the least 10 airports
top_10_on_time_airports = on_time_airport_counts.head(10)
least_10_on_time_airports = on_time_airport_counts.tail(10)

# Sort the combined data by values
top_10_on_time_airports = top_10_on_time_airports.sort_values(ascending=False)
least_10_on_time_airports = least_10_on_time_airports.sort_values(ascending=False)

# Create subplots
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

# Plot the top 10 airports
sns.barplot(x=top_10_on_time_airports.values, y=top_10_on_time_airports.index, palette='coolwarm', ax=axes[0])
axes[0].set_title('Top 10 Airports with "On Time" Flights')
axes[0].set_xlabel('Number of "On Time" Flights')
axes[0].set_ylabel('Airport Name')

# Plot the least 10 airports
sns.barplot(x=least_10_on_time_airports.values, y=least_10_on_time_airports.index, palette='coolwarm', ax=axes[1])
axes[1].set_title('Least 10 Airports with "On Time" Flights')
axes[1].set_xlabel('Number of "On Time" Flights')
axes[1].set_ylabel('Airport Name')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Filter the DataFrame to only include rows with 'Flight Status' equal to 'Delayed'
delayed_df = df[df['Flight Status'] == 'Delayed']

# Count the occurrences of each 'Airport Name'
delayed_airport_counts = delayed_df['Airport Name'].value_counts()

# Select the top 10 airports and the least 10 airports
top_10_delayed_airports = delayed_airport_counts.head(10)
least_10_delayed_airports = delayed_airport_counts.tail(10)

# Sort the combined data by values
top_10_delayed_airports = top_10_delayed_airports.sort_values(ascending=False)
least_10_delayed_airports = least_10_delayed_airports.sort_values(ascending=False)

# Create subplots
fig, axes = plt.subplots(1, 2, figsize=(13, 6))

# Plot the top 10 airports
sns.barplot(x=top_10_delayed_airports.values, y=top_10_delayed_airports.index, palette='coolwarm', ax=axes[0])
axes[0].set_title('Top 10 Airports with "Delayed" Flights')
axes[0].set_xlabel('Number of "Delayed" Flights')
axes[0].set_ylabel('Airport Name')

# Plot the least 10 airports
sns.barplot(x=least_10_delayed_airports.values, y=least_10_delayed_airports.index, palette='coolwarm', ax=axes[1])
axes[1].set_title('Least 10 Airports with "Delayed" Flights')
axes[1].set_xlabel('Number of "Delayed" Flights')
axes[1].set_ylabel('Airport Name')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Filter the DataFrame to only include rows with 'Flight Status' equal to 'Cancelled'
cancelled_df = df[df['Flight Status'] == 'Cancelled']

# Count the occurrences of each 'Airport Name'
cancelled_airport_counts = cancelled_df['Airport Name'].value_counts()

# Select the top 10 airports and the least 10 airports
top_10_cancelled_airports = cancelled_airport_counts.head(10)
least_10_cancelled_airports = cancelled_airport_counts.tail(10)

# Sort the combined data by values
top_10_cancelled_airports = top_10_cancelled_airports.sort_values(ascending=False)
least_10_cancelled_airports = least_10_cancelled_airports.sort_values(ascending=False)

# Create subplots
fig, axes = plt.subplots(1, 2, figsize=(13, 4))

# Plot the top 10 airports
sns.barplot(x=top_10_cancelled_airports.values, y=top_10_cancelled_airports.index, palette='Set3', ax=axes[0])
axes[0].set_title('Top 10 Airports with "Cancelled" Flights')
axes[0].set_xlabel('Number of "Cancelled" Flights')
axes[0].set_ylabel('Airport Name')

# Plot the least 10 airports
sns.barplot(x=least_10_cancelled_airports.values, y=least_10_cancelled_airports.index, palette='Set3', ax=axes[1])
axes[1].set_title('Least 10 Airports with "Cancelled" Flights')
axes[1].set_xlabel('Number of "Cancelled" Flights')
axes[1].set_ylabel('Airport Name')

plt.tight_layout()
plt.show()

# Age
# Define the age categories
bins = [0, 35, 55, 100]
labels = ['Youth', 'Mid Aged', 'Aged']

# Create a new column 'Age Group' based on the age categories
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels)

# Count the occurrences of each age group
age_group_counts = df['Age Group'].value_counts()

# Create a pie chart for age groups
plt.figure(figsize=(8, 6))
plt.pie(age_group_counts, labels=age_group_counts.index, autopct='%1.1f%%', colors=sns.color_palette('Set2'))
plt.title('Distribution of Age Groups', fontweight='bold')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Define the age categories
bins = [0, 35, 55, 100]
labels = ['Youth', 'Mid Aged', 'Aged']

# Create a new column 'Age Group' based on the age categories
df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels)

# Filter the DataFrame for females
female_df = df[df['Gender'] == 'Female']
# Count the occurrences of each age group for females
female_age_group_counts = female_df['Age Group'].value_counts()

# Filter the DataFrame for males
male_df = df[df['Gender'] == 'Male']
# Count the occurrences of each age group for males
male_age_group_counts = male_df['Age Group'].value_counts()

# Create subplots for female and male age group pie charts
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Female Age Group Pie Chart
axs[0].pie(female_age_group_counts, labels=female_age_group_counts.index, autopct='%1.1f%%', colors=sns.color_palette('Set2'))
axs[0].set_title('Female Age Groups', fontweight='bold')
axs[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

# Male Age Group Pie Chart
axs[1].pie(male_age_group_counts, labels=male_age_group_counts.index, autopct='%1.1f%%', colors=sns.color_palette('Set2'))
axs[1].set_title('Male Age Groups', fontweight='bold')
axs[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.tight_layout()
plt.show()

"""###**Delayed Patterns**"""

# Analyze gender-related flight delay patterns
gender_delay_stats = df.groupby('Gender')['Flight Status'].value_counts().unstack(fill_value=0)
gender_delay_stats.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Flight Delay by Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.legend(title='Flight Status')
plt.show()

# Identify countries with the most passengers
top_nationalities = df['Nationality'].value_counts().head(10)

# Create a bar plot for the top 10 nationalities with the most passengers
plt.figure(figsize=(10, 6))
sns.barplot(x=top_nationalities.values, y=top_nationalities.index, palette='viridis')
plt.title('Top 10 Nationalities with the Most Passengers')
plt.xlabel('Number of Passengers')
plt.ylabel('Nationality')
plt.show()

# Analyze flight delays by nationality
nationality_delay_stats = df.groupby('Nationality')['Flight Status'].value_counts().unstack(fill_value=0)

# Create a bar plot to visualize nationality-wise delay patterns
nationality_delay_stats.head(10).plot(kind='bar', stacked=True, figsize=(12, 6))
plt.title('Flight Delay by Nationality (Top 10)')
plt.xlabel('Nationality')
plt.ylabel('Count')
plt.legend(title='Flight Status')
plt.show()

# Create a pie chart to show delay distribution for a specific nationality (e.g., 'China')
china_delay_distribution = nationality_delay_stats.loc['China']
plt.figure(figsize=(8, 8))
plt.pie(china_delay_distribution, labels=china_delay_distribution.index, autopct='%1.1f%%', colors=sns.color_palette('Set3'))
plt.title('Flight Delay Distribution for Chinese Passengers')
plt.axis('equal')
plt.show()

# Calculate delay rates for each airport
airport_delay_rates = (df.groupby('Airport Name')['Flight Status']
                       .apply(lambda x: (x == 'Delayed').sum() / len(x) * 100)
                       .sort_values(ascending=False))

# Visualize the top 10 airports with the highest delay rates
plt.figure(figsize=(12, 6))
sns.barplot(x=airport_delay_rates.head(10).values, y=airport_delay_rates.head(10).index, palette='viridis')
plt.title('Top 10 Airports with the Highest Delay Rates')
plt.xlabel('Delay Rate (%)')
plt.ylabel('Airport Name')
plt.show()

# Visualize the top 10 airports with the lowest delay rates
plt.figure(figsize=(12, 6))
sns.barplot(x=airport_delay_rates.tail(10).values, y=airport_delay_rates.tail(10).index, palette='viridis')
plt.title('Top 10 Airports with the Lowest Delay Rates')
plt.xlabel('Delay Rate (%)')
plt.ylabel('Airport Name')
plt.show()

# To visualize airport-wise delay patterns on a map, you can use libraries like Folium or Plotly.
# Here's an example using Folium:
import folium

# Create a map
m = folium.Map(location=[0, 0], zoom_start=2)

# Add markers for airports with color-coded delay rates
for index, row in airport_delay_rates.iteritems():
    color = 'red' if row > 10 else 'green'  # Color-coding based on delay rate threshold
    folium.CircleMarker(
        location=[0, 0],  # Replace with airport coordinates if available
        radius=row * 0.2,  # Adjust the marker size based on delay rate
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=0.7,
        popup=f"{index}: {row:.2f}% Delay Rate"
    ).add_to(m)

# Display the map
m.save('airport_delay_map.html')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Convert "Departure Date" to datetime format
df['Departure Date'] = pd.to_datetime(df['Departure Date'])

# Extract date components
df['Year'] = df['Departure Date'].dt.year
df['Month'] = df['Departure Date'].dt.month
df['Day'] = df['Departure Date'].dt.day
df['Day of Week'] = df['Departure Date'].dt.dayofweek  # Monday=0, Sunday=6

# Analyze delay variations by month
monthly_delay = df.groupby('Month')['Flight Status'].apply(lambda x: (x == 'Delayed').sum() / len(x) * 100)

# Visualize delay patterns by month
plt.figure(figsize=(12, 6))
sns.barplot(x=monthly_delay.index, y=monthly_delay.values, palette='coolwarm')
plt.title('Delay Patterns by Month')
plt.xlabel('Month')
plt.ylabel('Delay Rate (%)')
plt.xticks(range(1, 13), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

# Analyze delay variations by day of the week
day_of_week_delay = df.groupby('Day of Week')['Flight Status'].apply(lambda x: (x == 'Delayed').sum() / len(x) * 100)

# Visualize delay patterns by day of the week
plt.figure(figsize=(10, 6))
sns.barplot(x=day_of_week_delay.index, y=day_of_week_delay.values, palette='coolwarm')
plt.title('Delay Patterns by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Delay Rate (%)')
plt.xticks(range(7), labels=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])
plt.show()

# Group data by continent
continent_groups = df.groupby('Continents')

# Calculate the count of 'Delayed' and 'On Time' flights for each continent
delay_counts_by_continent = continent_groups['Flight Status'].value_counts().unstack().fillna(0)

# Visualize delay patterns by continent
plt.figure(figsize=(12, 6))
delay_counts_by_continent.plot(kind='bar', stacked=True, colormap='viridis')
plt.title('Delay Patterns by Continent')
plt.xlabel('Continent')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.legend(title='Flight Status')
plt.show()

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Print the correlation matrix
print(correlation_matrix)



# Create a heatmap of the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

"""#Copy and paste this code in the code cell if you have enough RAM to encode the df and display the correlation.

# Encode categorical columns using one-hot encoding
df_encoded = pd.get_dummies(df, columns=['Gender', 'Nationality', 'Airport Name', 'Country Name', 'Airport Continent', 'Continents', 'Arrival Airport', 'Pilot Name', 'Flight Status'])
# Calculate correlations with 'Flight Status_Delayed'
correlation_with_delay = df_encoded.corr()['Flight Status_Delayed']
import matplotlib.pyplot as plt

# Sort the correlations in descending order
sorted_correlations = correlation_with_delay.abs().sort_values(ascending=False)

# Select the top N correlations to display
top_correlations = sorted_correlations.head(10)

# Create a bar plot
plt.figure(figsize=(10, 6))
top_correlations.plot(kind='bar')
plt.title('Top Correlations with Flight Status_Delayed')
plt.ylabel('Correlation Coefficient')
plt.xticks(rotation=45)
plt.show()

#**Dashboard**
"""

!pip install panel
!pip install hvplot

import panel as pn
import hvplot.pandas

# Load your dataset
id = '1XGu5vQQJMLh523oE1y0IlQT3D1ODj-OL'
url_template = 'https://drive.google.com/uc?id={}'
url = url_template.format(id)

df = pd.read_csv(url)

# Create a widget to select columns
column_selector = pn.widgets.Select(name='Select Column', options=df.columns.tolist())

# Create a widget to filter data by gender
gender_selector = pn.widgets.Select(name='Select Gender', options=['Male', 'Female'])

# Create a function to filter data by gender and plot
@pn.depends(column_selector, gender_selector)
def filtered_data(column, gender):
    filtered_df = df[df['Gender'] == gender]
    return filtered_df[column]

# Create a Plotly-based interactive plot
@pn.depends(column_selector, gender_selector)
def plot(column, gender):
    filtered_df = df[df['Gender'] == gender]
    return filtered_df.hvplot.scatter(x=column, y='Age', title=f'{column} vs. Age')

# Create a dashboard layout
dashboard = pn.Column(
    pn.Row(column_selector, gender_selector),
    pn.Row(filtered_data, plot)
)

# Mark your dashboard as servable
dashboard.servable()

# Serve the dashboard in the Colab notebook
pn.serve(dashboard)

# Create a DataFrame (replace this with your data)
df = pd.DataFrame({'x': range(10), 'y': range(10)})

# Create a scatter plot using Panel
scatter_plot = df.hvplot.scatter(x='x', y='y', title='Scatter Plot')

# Create a Panel dashboard
dashboard = pn.Column(scatter_plot)

# Display the dashboard directly in the Colab notebook
dashboard.show()